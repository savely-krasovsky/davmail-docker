---
name: 'build images'

on:
  push:
    branches:
      - master
    tags:
      - '*.*.*'
  schedule:
    - cron: '15 2 * * sun,tue,thu,sat'

jobs:
  build-image:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Prepare
        id: prep
        run: |
          set -x
          DOCKER_IMAGE=ghcr.io/${{ github.repository_owner }}/${GITHUB_REPOSITORY#*/}
          
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/}
          else
            VERSION=latest
          fi
          
          TAGS="${DOCKER_IMAGE}:${VERSION}"

          # Для tagged releases также добавляем тег 'latest'
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            TAGS="$TAGS,${DOCKER_IMAGE}:latest"
          fi

          # Set output parameters
          echo "tags=${TAGS}" >> $GITHUB_OUTPUT
          echo "version=${VERSION}" >> $GITHUB_OUTPUT

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
        with:
          platforms: all

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to GitHub Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v3
        with:
          builder: ${{ steps.buildx.outputs.name }}
          context: .
          file: ./Dockerfile
          platforms: linux/amd64,linux/arm64/v8
          push: true
          tags: ${{ steps.prep.outputs.tags }}

      - name: Test default arch
        env:
          # ./tests/*.yaml tests the image in test environment
          # ./docker-compose.yaml tests the ./docker-compose.yaml example, not the image
          COMPOSE_FILE: ./tests/compose-sut.yaml:./docker-compose.yaml
          IMAGE_NAME: ghcr.io/${{ github.repository_owner }}/${GITHUB_REPOSITORY#*/}:${{ steps.prep.outputs.version }}
        run: |
          set -e
          docker compose up --force-recreate --build --exit-code-from sut sut
          docker compose down

          podman play kube k8s-pod.yaml
          podman pod stop davmail-pod
          podman pod rm davmail-pod

          # sudo apt update && sudo apt -y install python3-pip
          # pip install podman-compose # you may use: pip3 install podman-compose
          # podman-compose up --force-recreate --build --exit-code-from sut sut
          # podman-compose down
